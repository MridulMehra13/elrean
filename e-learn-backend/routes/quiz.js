const express = require("express");
const mongoose = require("mongoose");
const fs = require("fs");
const path = require("path");
const Quiz = require("../models/Quiz");
const QuizAttempt = require("../models/QuizAttempt");
const User = require("../models/User");
const verifyToken = require("../middleware/authMiddleware");
const requireRole = require("../middleware/roleMiddleware");

const router = express.Router();

// Create a new quiz (for AI generator â€“ both teachers and students allowed)
router.post("/create", verifyToken, async (req, res) => {
    try {
        const { title, description, questions, autoGenerated } = req.body;

        if (!title || !description || !questions || !Array.isArray(questions)) {
            return res.status(400).json({ error: "Invalid request body" });
        }

        // Validate each question
        const cleanedQuestions = questions.map((q) => {
            return {
                question: q.question,
                options: Array.isArray(q.options) ? q.options.slice(0, 4) : [],
                correctAnswer: q.correctAnswer || '',
            };
        });

        const newQuiz = new Quiz({
            title,
            description,
            questions: cleanedQuestions,
            createdBy: req.user.id,
            autoGenerated: autoGenerated || true
        });

        await newQuiz.save();

        // Create quiz folder (optional)
        const quizzesDir = path.join(__dirname, "..", "quizzes");
        if (!fs.existsSync(quizzesDir)) {
            fs.mkdirSync(quizzesDir);
        }

        const quizFolderName = newQuiz._id.toString();
        const quizFolderPath = path.join(quizzesDir, quizFolderName);
        if (!fs.existsSync(quizFolderPath)) {
            fs.mkdirSync(quizFolderPath);
        }

        res.status(201).json({ message: "Quiz created successfully!", quiz: newQuiz });
    } catch (error) {
        console.error("Error creating quiz:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
});


// Get all quizzes (students)
router.get("/all", verifyToken, async (req, res) => {
    try {
        const quizzes = await Quiz.find();
        res.json(quizzes);
    } catch (error) {
        console.error("Error fetching quizzes:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
});

// Get a specific quiz by ID
router.get("/:id", verifyToken, async (req, res) => {
    try {
        const { id } = req.params;

        console.log("User making request:", req.user); // Log user info for debugging
        console.log("Request params:", req.params);

        // Validate ID format
        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({ error: "Invalid Quiz ID" });
        }

        const quiz = await Quiz.findById(id);
        if (!quiz) return res.status(404).json({ error: "Quiz not found" });

        res.json(quiz);
    } catch (error) {
        console.error("Error fetching quiz:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
});


// Submit answers and store result
router.post("/:id/submit", verifyToken, async (req, res) => {
    try {
        const { id } = req.params;
        const { answers } = req.body;
        const userId = req.user.id;

        // Validate ID format
        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({ error: "Invalid Quiz ID" });
        }

        // Validate answers format
        if (!answers || !Array.isArray(answers)) {
            return res.status(400).json({ error: "Invalid answers format. Expected an array." });
        }

        const quiz = await Quiz.findById(id);
        if (!quiz) return res.status(404).json({ error: "Quiz not found" });

        if (quiz.questions.length !== answers.length) {
            return res.status(400).json({ error: "Mismatch between quiz questions and provided answers." });
        }

        let score = 0;
        let total = quiz.questions.length;

        // Support both MCQ and fill-in-the-blank
        quiz.questions.forEach((question, index) => {
            if (
              (question.options && answers[index] === question.correctAnswer) || // MCQ
              (!question.options && answers[index]?.trim().toLowerCase() === question.correctAnswer?.trim().toLowerCase()) // Fill in blank
            ) {
                score++;
            }
        });

        // XP reward: 10 XP per correct answer
        const xpEarned = score * 10;

        // Store attempt
        const attempt = new QuizAttempt({
            user: userId,
            quiz: id,
            answers,
            score,
            total,
            xpEarned
        });
        await attempt.save();

        // Add XP to user
        const user = await User.findById(userId);
        if (user) {
            user.xp += xpEarned;
            user.calculateLevel && user.calculateLevel();
            await user.save();
        }

        res.json({ score, total, xpEarned, attemptId: attempt._id });
    } catch (error) {
        console.error("Error submitting quiz:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
});

// ...existing code...

// Fetch all past quiz attempts for the logged-in student
router.get("/attempts", verifyToken, async (req, res) => {
    try {
        const userId = req.user.id;
        const attempts = await QuizAttempt.find({ user: userId }).populate("quiz").sort({ attemptedAt: -1 });
        res.json(attempts);
    } catch (error) {
        console.error("Error fetching attempts:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
});

// Fetch details of a specific attempt (for analytics/result page)
router.get("/attempt/:attemptId", verifyToken, async (req, res) => {
    try {
        const { attemptId } = req.params;
        if (!mongoose.Types.ObjectId.isValid(attemptId)) {
            return res.status(400).json({ error: "Invalid Attempt ID" });
        }
        const attempt = await QuizAttempt.findById(attemptId).populate("quiz");
        if (!attempt) return res.status(404).json({ error: "Attempt not found" });
        res.json(attempt);
    } catch (error) {
        console.error("Error fetching attempt:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
});

module.exports = router;
